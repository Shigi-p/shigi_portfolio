{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","page","maxPage","swipePageValid","pages","bind","bookmark","showBookmark","goNextpage","goPreviouspage","changePage","onSwipeMove","onSwipeEnd","className","onClick","setState","this","parseInt","position","event","x","console","log","type","value","min","max","step","onChange","e","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3075ed22.chunk.js","sourcesContent":["import React from 'react';\nimport Swipe from 'react-easy-swipe';\nimport './App.scss';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      page: 0,\n      maxPage: 9,\n      swipePageValid: false,\n    };\n    this.pages = this.pages.bind(this);\n    this.bookmark = this.bookmark.bind(this);\n    this.showBookmark = this.showBookmark.bind(this);\n    this.goNextpage = this.goNextpage.bind(this);\n    this.goPreviouspage = this.goPreviouspage.bind(this);\n    this.changePage = this.changePage.bind(this);\n    this.onSwipeMove = this.onSwipeMove.bind(this);\n    this.onSwipeEnd = this.onSwipeEnd.bind(this);\n  }\n\n  pages(page){\n    switch(page){\n      case 0:\n        return(\n          <div className=\"Page0\"></div>\n        );\n      case 1:\n        return(\n          <div className=\"Page1 Padding\">\n            <h1>This is my portfolio.</h1>\n          </div>\n        );\n      case 2:\n        return(\n          <div className=\"Page2 Padding\">\n            <h1>目次</h1>\n            <hr/>\n            <ul>\n              <li onClick={() => this.setState({page:3})}>Part1.鴫原俊樹について</li>\n              <li onClick={() => this.setState({page:3})}>Part2.大学での暮らし</li>\n              <li onClick={() => this.setState({page:3})}>Part3.つくったもの</li>\n              <li onClick={() => this.setState({page:3})}>Part4.連絡先</li>\n            </ul>\n          </div>\n        );\n      case 3:\n        return(\n          <div className=\"Page3 Padding\">\n            <h1>Part1.鴫原俊樹について</h1>\n            <hr />\n            <p>ここに画像を挿入</p>\n            <ul>\n              <li>会津大学学部3年</li>\n              <li>フロント書きます</li>\n            </ul>\n          </div>\n        );\n      case 4:\n        return(\n          <div className=\"Page4 Padding\">\n            <h1>Part2.大学での暮らし</h1>\n            <hr />\n            <p>生きる。</p>\n          </div>\n        );\n      case 5:\n        return(\n          <div className=\"Page5 Padding\">\n            <h1>Part3.つくったもの</h1>\n            <hr />\n            <p>ぶねすと</p>\n          </div>\n        );\n      case 6:\n        return(\n          <div className=\"Page6 Padding\">\n            <h1>Part4.連絡先</h1>\n            <hr />\n            <p>ぎっとはぶ</p>\n          </div>\n        );\n      default:\n        return(\n          <div className=\"Page99\"></div>\n        )\n    }\n  }\n\n  bookmark(){\n    return(\n      <div className=\"Bookmark\" onClick={this.showBookmark()}>\n      </div>\n    );\n  }\n\n  showBookmark(){\n\n  }\n\n  goNextpage(){\n    this.setState({\n      page: this.state.page + 1,\n    });\n  }\n\n  goPreviouspage(){\n    this.setState({\n      page: this.state.page - 1,\n    });\n  }\n\n  changePage(page){\n    this.setState({\n      page: parseInt(page, 10),\n    })\n  }\n\n  onSwipeMove(position, event) {\n    if(parseInt(position.x, 10) > 200 && !this.state.swipePageValid){\n      console.log(`Moved ${position.x} pixels horizontally`, event);\n      this.setState({\n        page: this.state.page + 1,\n        swipePageValid: true,\n      })\n    }else if(parseInt(position.x, 10) < -200 && !this.state.swipePageValid){\n      console.log(`Moved ${position.x} pixels horizontally`, event);\n      this.setState({\n        page: this.state.page - 1,\n        swipePageValid: true,\n      })\n    }\n  }\n\n  onSwipeEnd(){\n    this.setState({\n      swipePageValid: false,\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"Book\">\n          <Swipe\n            onSwipeMove={this.onSwipeMove}\n            onSwipeEnd={this.onSwipeEnd}>\n            {this.bookmark()}\n            <div className=\"RightPage\">\n              {this.pages(this.state.page)}\n              <span className=\"PreviouspageButton\" onClick={() => this.goPreviouspage()} />\n            </div>\n            <div className=\"LeftPage\">\n              <span className=\"NextpageButton\" onClick={() => this.goNextpage()} />\n              {this.pages(this.state.page + 1)}\n            </div>\n          </Swipe>\n        </div>\n        <div className=\"BottomMenubar\">\n          {this.state.page + 1}\n          <input className=\"InputRange\" type=\"range\" value={this.state.page} min=\"0\" max={this.state.maxPage} step=\"1\" onChange={(e) => this.changePage(e.target.value)}/>\n          {this.state.page}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}